# .github/workflows/build_and_test.yml

name: C++ CI/CD (Build & Test)

# --- Triggers ---
# This workflow will run on every push to the 'main' branch
# and on every pull request targeting the 'main' branch.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# --- Jobs Definition ---
jobs:
  build-and-test:
    name: Build & Test on ${{ matrix.os }} with ${{ matrix.compiler }} C++${{ matrix.cpp_standard }}

    # --- Matrix Strategy ---
    # Define a matrix to test across different operating systems and compilers.
    # This ensures your library is robust across various environments.
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        include:
          # Ubuntu with GCC
          - os: ubuntu-latest
            compiler: gcc
            cpp_standard: 20
            cc: gcc-11
            cxx: g++-11
          # Ubuntu with Clang
          - os: ubuntu-latest
            compiler: clang
            cpp_standard: 20
            cc: clang-14
            cxx: clang++-14
          # Windows with MSVC
          - os: windows-latest
            compiler: msvc
            cpp_standard: 20
          # macOS with Clang
          - os: macos-latest
            compiler: clang
            cpp_standard: 20
            cc: clang
            cxx: clang++

    # The operating system to run the job on, taken from the matrix.
    runs-on: ${{ matrix.os }}

    # --- Steps Definition ---
    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Setup C++ environment (Linux/macOS)
      - name: Setup GCC/Clang (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y gcc-11 g++-11
          else
            sudo apt-get install -y clang-14 clang++-14
          fi

      # 3. Setup C++ environment (macOS)
      - name: Setup Clang (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Xcode Command Line Tools should already provide clang
          clang --version
          clang++ --version

      # 4. Setup MSVC (Windows)
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      # 5. Set environment variables for compiler
      - name: Set Compiler Environment Variables
        shell: bash
        run: |
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
            echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
          fi

      # 6. Cache CMake dependencies (like Google Test from FetchContent)
      # This speeds up subsequent runs by reusing downloaded dependencies.
      - name: Cache CMake Dependencies
        uses: actions/cache@v4
        with:
          # Cache the _deps directory where FetchContent downloads are stored
          path: ${{ github.workspace }}/build/_deps
          # Key based on CMakeLists.txt hash to invalidate cache if dependencies change
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('CMakeLists.txt', 'test/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-

      # 7. Configure CMake
      # Creates the build system files (e.g., Makefiles, Visual Studio projects).
      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }}

      # 8. Build the Project
      # Compiles your library and test executables.
      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Release

      # 9. Run Tests using CTest
      # Executes all tests defined in your CMake project.
      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest --output-on-failure --build-config Release

      # 10. Upload Test Results (Optional but Recommended)
      # Note: JUnit XML generation might need additional CMake configuration
      - name: Generate Test Report
        if: always()
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest --output-junit test-results.xml --build-config Release || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() # Always run this step, even if tests fail
        with:
          name: test-results-${{ runner.os }}-${{ matrix.compiler }}
          path: ${{ github.workspace }}/build/test-results.xml

      # 11. Upload Build Logs (Optional)
      # Useful for debugging build failures.
      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: failure() # Only upload logs if the build failed
        with:
          name: build-logs-${{ runner.os }}-${{ matrix.compiler }}
          path: |
            ${{ github.workspace }}/build/CMakeFiles/CMakeOutput.log
            ${{ github.workspace }}/build/CMakeFiles/CMakeError.log